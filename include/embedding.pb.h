// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: embedding.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_embedding_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_embedding_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_embedding_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_embedding_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_embedding_2eproto;
namespace protoembedding {
class NodeEmbedding;
struct NodeEmbeddingDefaultTypeInternal;
extern NodeEmbeddingDefaultTypeInternal _NodeEmbedding_default_instance_;
class NodeEmbeddingRequest;
struct NodeEmbeddingRequestDefaultTypeInternal;
extern NodeEmbeddingRequestDefaultTypeInternal _NodeEmbeddingRequest_default_instance_;
class NodeEmbeddingResponse;
struct NodeEmbeddingResponseDefaultTypeInternal;
extern NodeEmbeddingResponseDefaultTypeInternal _NodeEmbeddingResponse_default_instance_;
}  // namespace protoembedding
PROTOBUF_NAMESPACE_OPEN
template<> ::protoembedding::NodeEmbedding* Arena::CreateMaybeMessage<::protoembedding::NodeEmbedding>(Arena*);
template<> ::protoembedding::NodeEmbeddingRequest* Arena::CreateMaybeMessage<::protoembedding::NodeEmbeddingRequest>(Arena*);
template<> ::protoembedding::NodeEmbeddingResponse* Arena::CreateMaybeMessage<::protoembedding::NodeEmbeddingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protoembedding {

// ===================================================================

class NodeEmbeddingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoembedding.NodeEmbeddingRequest) */ {
 public:
  inline NodeEmbeddingRequest() : NodeEmbeddingRequest(nullptr) {}
  ~NodeEmbeddingRequest() override;
  explicit PROTOBUF_CONSTEXPR NodeEmbeddingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeEmbeddingRequest(const NodeEmbeddingRequest& from);
  NodeEmbeddingRequest(NodeEmbeddingRequest&& from) noexcept
    : NodeEmbeddingRequest() {
    *this = ::std::move(from);
  }

  inline NodeEmbeddingRequest& operator=(const NodeEmbeddingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeEmbeddingRequest& operator=(NodeEmbeddingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeEmbeddingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeEmbeddingRequest* internal_default_instance() {
    return reinterpret_cast<const NodeEmbeddingRequest*>(
               &_NodeEmbeddingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeEmbeddingRequest& a, NodeEmbeddingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeEmbeddingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeEmbeddingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeEmbeddingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeEmbeddingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeEmbeddingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeEmbeddingRequest& from) {
    NodeEmbeddingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeEmbeddingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoembedding.NodeEmbeddingRequest";
  }
  protected:
  explicit NodeEmbeddingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdsFieldNumber = 1,
  };
  // repeated uint32 node_ids = 1;
  int node_ids_size() const;
  private:
  int _internal_node_ids_size() const;
  public:
  void clear_node_ids();
  private:
  uint32_t _internal_node_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_node_ids() const;
  void _internal_add_node_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_node_ids();
  public:
  uint32_t node_ids(int index) const;
  void set_node_ids(int index, uint32_t value);
  void add_node_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      node_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_node_ids();

  // @@protoc_insertion_point(class_scope:protoembedding.NodeEmbeddingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > node_ids_;
    mutable std::atomic<int> _node_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedding_2eproto;
};
// -------------------------------------------------------------------

class NodeEmbedding final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoembedding.NodeEmbedding) */ {
 public:
  inline NodeEmbedding() : NodeEmbedding(nullptr) {}
  ~NodeEmbedding() override;
  explicit PROTOBUF_CONSTEXPR NodeEmbedding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeEmbedding(const NodeEmbedding& from);
  NodeEmbedding(NodeEmbedding&& from) noexcept
    : NodeEmbedding() {
    *this = ::std::move(from);
  }

  inline NodeEmbedding& operator=(const NodeEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeEmbedding& operator=(NodeEmbedding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeEmbedding& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeEmbedding* internal_default_instance() {
    return reinterpret_cast<const NodeEmbedding*>(
               &_NodeEmbedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeEmbedding& a, NodeEmbedding& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeEmbedding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeEmbedding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeEmbedding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeEmbedding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeEmbedding& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeEmbedding& from) {
    NodeEmbedding::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeEmbedding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoembedding.NodeEmbedding";
  }
  protected:
  explicit NodeEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated float values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:protoembedding.NodeEmbedding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedding_2eproto;
};
// -------------------------------------------------------------------

class NodeEmbeddingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoembedding.NodeEmbeddingResponse) */ {
 public:
  inline NodeEmbeddingResponse() : NodeEmbeddingResponse(nullptr) {}
  ~NodeEmbeddingResponse() override;
  explicit PROTOBUF_CONSTEXPR NodeEmbeddingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeEmbeddingResponse(const NodeEmbeddingResponse& from);
  NodeEmbeddingResponse(NodeEmbeddingResponse&& from) noexcept
    : NodeEmbeddingResponse() {
    *this = ::std::move(from);
  }

  inline NodeEmbeddingResponse& operator=(const NodeEmbeddingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeEmbeddingResponse& operator=(NodeEmbeddingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeEmbeddingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeEmbeddingResponse* internal_default_instance() {
    return reinterpret_cast<const NodeEmbeddingResponse*>(
               &_NodeEmbeddingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NodeEmbeddingResponse& a, NodeEmbeddingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeEmbeddingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeEmbeddingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeEmbeddingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeEmbeddingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeEmbeddingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeEmbeddingResponse& from) {
    NodeEmbeddingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeEmbeddingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoembedding.NodeEmbeddingResponse";
  }
  protected:
  explicit NodeEmbeddingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbeddingsFieldNumber = 1,
    kMissingIdsFieldNumber = 2,
  };
  // repeated .protoembedding.NodeEmbedding embeddings = 1;
  int embeddings_size() const;
  private:
  int _internal_embeddings_size() const;
  public:
  void clear_embeddings();
  ::protoembedding::NodeEmbedding* mutable_embeddings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoembedding::NodeEmbedding >*
      mutable_embeddings();
  private:
  const ::protoembedding::NodeEmbedding& _internal_embeddings(int index) const;
  ::protoembedding::NodeEmbedding* _internal_add_embeddings();
  public:
  const ::protoembedding::NodeEmbedding& embeddings(int index) const;
  ::protoembedding::NodeEmbedding* add_embeddings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoembedding::NodeEmbedding >&
      embeddings() const;

  // repeated uint32 missing_ids = 2;
  int missing_ids_size() const;
  private:
  int _internal_missing_ids_size() const;
  public:
  void clear_missing_ids();
  private:
  uint32_t _internal_missing_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_missing_ids() const;
  void _internal_add_missing_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_missing_ids();
  public:
  uint32_t missing_ids(int index) const;
  void set_missing_ids(int index, uint32_t value);
  void add_missing_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      missing_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_missing_ids();

  // @@protoc_insertion_point(class_scope:protoembedding.NodeEmbeddingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoembedding::NodeEmbedding > embeddings_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > missing_ids_;
    mutable std::atomic<int> _missing_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedding_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeEmbeddingRequest

// repeated uint32 node_ids = 1;
inline int NodeEmbeddingRequest::_internal_node_ids_size() const {
  return _impl_.node_ids_.size();
}
inline int NodeEmbeddingRequest::node_ids_size() const {
  return _internal_node_ids_size();
}
inline void NodeEmbeddingRequest::clear_node_ids() {
  _impl_.node_ids_.Clear();
}
inline uint32_t NodeEmbeddingRequest::_internal_node_ids(int index) const {
  return _impl_.node_ids_.Get(index);
}
inline uint32_t NodeEmbeddingRequest::node_ids(int index) const {
  // @@protoc_insertion_point(field_get:protoembedding.NodeEmbeddingRequest.node_ids)
  return _internal_node_ids(index);
}
inline void NodeEmbeddingRequest::set_node_ids(int index, uint32_t value) {
  _impl_.node_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protoembedding.NodeEmbeddingRequest.node_ids)
}
inline void NodeEmbeddingRequest::_internal_add_node_ids(uint32_t value) {
  _impl_.node_ids_.Add(value);
}
inline void NodeEmbeddingRequest::add_node_ids(uint32_t value) {
  _internal_add_node_ids(value);
  // @@protoc_insertion_point(field_add:protoembedding.NodeEmbeddingRequest.node_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NodeEmbeddingRequest::_internal_node_ids() const {
  return _impl_.node_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NodeEmbeddingRequest::node_ids() const {
  // @@protoc_insertion_point(field_list:protoembedding.NodeEmbeddingRequest.node_ids)
  return _internal_node_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NodeEmbeddingRequest::_internal_mutable_node_ids() {
  return &_impl_.node_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NodeEmbeddingRequest::mutable_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:protoembedding.NodeEmbeddingRequest.node_ids)
  return _internal_mutable_node_ids();
}

// -------------------------------------------------------------------

// NodeEmbedding

// repeated float values = 1;
inline int NodeEmbedding::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int NodeEmbedding::values_size() const {
  return _internal_values_size();
}
inline void NodeEmbedding::clear_values() {
  _impl_.values_.Clear();
}
inline float NodeEmbedding::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline float NodeEmbedding::values(int index) const {
  // @@protoc_insertion_point(field_get:protoembedding.NodeEmbedding.values)
  return _internal_values(index);
}
inline void NodeEmbedding::set_values(int index, float value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:protoembedding.NodeEmbedding.values)
}
inline void NodeEmbedding::_internal_add_values(float value) {
  _impl_.values_.Add(value);
}
inline void NodeEmbedding::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:protoembedding.NodeEmbedding.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeEmbedding::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NodeEmbedding::values() const {
  // @@protoc_insertion_point(field_list:protoembedding.NodeEmbedding.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeEmbedding::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NodeEmbedding::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:protoembedding.NodeEmbedding.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// NodeEmbeddingResponse

// repeated .protoembedding.NodeEmbedding embeddings = 1;
inline int NodeEmbeddingResponse::_internal_embeddings_size() const {
  return _impl_.embeddings_.size();
}
inline int NodeEmbeddingResponse::embeddings_size() const {
  return _internal_embeddings_size();
}
inline void NodeEmbeddingResponse::clear_embeddings() {
  _impl_.embeddings_.Clear();
}
inline ::protoembedding::NodeEmbedding* NodeEmbeddingResponse::mutable_embeddings(int index) {
  // @@protoc_insertion_point(field_mutable:protoembedding.NodeEmbeddingResponse.embeddings)
  return _impl_.embeddings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoembedding::NodeEmbedding >*
NodeEmbeddingResponse::mutable_embeddings() {
  // @@protoc_insertion_point(field_mutable_list:protoembedding.NodeEmbeddingResponse.embeddings)
  return &_impl_.embeddings_;
}
inline const ::protoembedding::NodeEmbedding& NodeEmbeddingResponse::_internal_embeddings(int index) const {
  return _impl_.embeddings_.Get(index);
}
inline const ::protoembedding::NodeEmbedding& NodeEmbeddingResponse::embeddings(int index) const {
  // @@protoc_insertion_point(field_get:protoembedding.NodeEmbeddingResponse.embeddings)
  return _internal_embeddings(index);
}
inline ::protoembedding::NodeEmbedding* NodeEmbeddingResponse::_internal_add_embeddings() {
  return _impl_.embeddings_.Add();
}
inline ::protoembedding::NodeEmbedding* NodeEmbeddingResponse::add_embeddings() {
  ::protoembedding::NodeEmbedding* _add = _internal_add_embeddings();
  // @@protoc_insertion_point(field_add:protoembedding.NodeEmbeddingResponse.embeddings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoembedding::NodeEmbedding >&
NodeEmbeddingResponse::embeddings() const {
  // @@protoc_insertion_point(field_list:protoembedding.NodeEmbeddingResponse.embeddings)
  return _impl_.embeddings_;
}

// repeated uint32 missing_ids = 2;
inline int NodeEmbeddingResponse::_internal_missing_ids_size() const {
  return _impl_.missing_ids_.size();
}
inline int NodeEmbeddingResponse::missing_ids_size() const {
  return _internal_missing_ids_size();
}
inline void NodeEmbeddingResponse::clear_missing_ids() {
  _impl_.missing_ids_.Clear();
}
inline uint32_t NodeEmbeddingResponse::_internal_missing_ids(int index) const {
  return _impl_.missing_ids_.Get(index);
}
inline uint32_t NodeEmbeddingResponse::missing_ids(int index) const {
  // @@protoc_insertion_point(field_get:protoembedding.NodeEmbeddingResponse.missing_ids)
  return _internal_missing_ids(index);
}
inline void NodeEmbeddingResponse::set_missing_ids(int index, uint32_t value) {
  _impl_.missing_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protoembedding.NodeEmbeddingResponse.missing_ids)
}
inline void NodeEmbeddingResponse::_internal_add_missing_ids(uint32_t value) {
  _impl_.missing_ids_.Add(value);
}
inline void NodeEmbeddingResponse::add_missing_ids(uint32_t value) {
  _internal_add_missing_ids(value);
  // @@protoc_insertion_point(field_add:protoembedding.NodeEmbeddingResponse.missing_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NodeEmbeddingResponse::_internal_missing_ids() const {
  return _impl_.missing_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NodeEmbeddingResponse::missing_ids() const {
  // @@protoc_insertion_point(field_list:protoembedding.NodeEmbeddingResponse.missing_ids)
  return _internal_missing_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NodeEmbeddingResponse::_internal_mutable_missing_ids() {
  return &_impl_.missing_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NodeEmbeddingResponse::mutable_missing_ids() {
  // @@protoc_insertion_point(field_mutable_list:protoembedding.NodeEmbeddingResponse.missing_ids)
  return _internal_mutable_missing_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoembedding

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_embedding_2eproto
