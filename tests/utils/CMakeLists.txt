# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT license.

set(CMAKE_CXX_STANDARD 14)

add_executable(fvecs_to_bin fvecs_to_bin.cpp)
if(MSVC)
	target_link_options(fvecs_to_bin PRIVATE /MACHINE:x64)
	target_link_libraries(fvecs_to_bin debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(fvecs_to_bin optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
endif()

add_executable(float_bin_to_int8 float_bin_to_int8.cpp)
if(MSVC)
	target_link_options(float_bin_to_int8 PRIVATE /MACHINE:x64)
	target_link_libraries(float_bin_to_int8 debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(float_bin_to_int8 optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
endif()

add_executable(ivecs_to_bin ivecs_to_bin.cpp)
if(MSVC)
	target_link_options(ivecs_to_bin PRIVATE /MACHINE:x64)
	target_link_libraries(ivecs_to_bin debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(ivecs_to_bin optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
endif()

add_executable(tsv_to_bin tsv_to_bin.cpp)
if(MSVC)
	target_link_options(tsv_to_bin PRIVATE /MACHINE:x64)
	target_link_libraries(tsv_to_bin debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(tsv_to_bin optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
endif()

add_executable(bin_to_tsv bin_to_tsv.cpp)
if(MSVC)
	target_link_options(bin_to_tsv PRIVATE /MACHINE:x64)
	target_link_libraries(bin_to_tsv debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(bin_to_tsv optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
endif()

add_executable(int8_to_float int8_to_float.cpp)
if(MSVC)
	target_link_options(int8_to_float PRIVATE /MACHINE:x64)
	target_link_libraries(int8_to_float debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(int8_to_float optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(int8_to_float ${PROJECT_NAME})
endif()

add_executable(int8_to_float_scale int8_to_float_scale.cpp)
if(MSVC)
	target_link_options(int8_to_float_scale PRIVATE /MACHINE:x64)
	target_link_libraries(int8_to_float_scale debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(int8_to_float_scale optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else()
	target_link_libraries(int8_to_float_scale ${PROJECT_NAME})
endif()

add_executable(uint8_to_float uint8_to_float.cpp)
if(MSVC)
	target_link_options(uint8_to_float PRIVATE /MACHINE:x64)
	target_link_libraries(uint8_to_float debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(uint8_to_float optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(uint8_to_float ${PROJECT_NAME})
endif()


add_executable(uint32_to_uint8 uint32_to_uint8.cpp)
if(MSVC)
	target_link_options(uint32_to_uint8 PRIVATE /MACHINE:x64)
	target_link_libraries(uint32_to_uint8 debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(uint32_to_uint8 optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(uint32_to_uint8 ${PROJECT_NAME})
endif()


add_executable(vector_analysis vector_analysis.cpp)
if(MSVC)
	target_link_options(vector_analysis PRIVATE /MACHINE:x64)
	target_link_libraries(vector_analysis debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(vector_analysis optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(vector_analysis ${PROJECT_NAME} -ltcmalloc)
endif()

add_executable(gen_random_slice gen_random_slice.cpp)
if(MSVC)
	target_link_options(gen_random_slice PRIVATE /MACHINE:x64)
	target_link_libraries(gen_random_slice debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(gen_random_slice optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(gen_random_slice ${PROJECT_NAME} -ltcmalloc)
endif()

add_executable(calculate_recall calculate_recall.cpp)
if(MSVC)
	target_link_options(calculate_recall PRIVATE /MACHINE:x64)
	target_link_libraries(calculate_recall debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(calculate_recall optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(calculate_recall ${PROJECT_NAME} aio -ltcmalloc)
endif()


add_executable(compute_groundtruth compute_groundtruth.cpp)
if(MSVC)
	target_link_options(compute_groundtruth PRIVATE /MACHINE:x64)
	target_link_libraries(compute_groundtruth debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(compute_groundtruth optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(compute_groundtruth ${PROJECT_NAME} aio)
endif()


add_executable(generate_pq generate_pq.cpp)
if(MSVC)
	target_link_options(generate_pq PRIVATE /MACHINE:x64 /DEBUG:FULL)
	target_link_libraries(generate_pq debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(generate_pq optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(generate_pq ${PROJECT_NAME} -ltcmalloc)
endif()

add_executable(partition_data partition_data.cpp)
if(MSVC)
	target_link_options(partition_data PRIVATE /MACHINE:x64 /DEBUG:FULL)
	target_link_libraries(partition_data debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(partition_data optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(partition_data ${PROJECT_NAME} -ltcmalloc)
endif()


add_executable(partition_with_ram_budget partition_with_ram_budget.cpp)
if(MSVC)
	target_link_options(partition_with_ram_budget PRIVATE /MACHINE:x64)
	target_link_libraries(partition_with_ram_budget debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(partition_with_ram_budget optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(partition_with_ram_budget ${PROJECT_NAME} -ltcmalloc)
endif()



add_executable(merge_shards merge_shards.cpp)
if(MSVC)
	target_link_options(merge_shards PRIVATE /MACHINE:x64)
	target_link_libraries(merge_shards debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib)
	target_link_libraries(merge_shards optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib)
else() 
	target_link_libraries(merge_shards ${PROJECT_NAME} -ltcmalloc aio)
endif()

add_executable(create_disk_layout create_disk_layout.cpp)
if(MSVC)
	target_link_options(create_disk_layout PRIVATE /MACHINE:x64 /DEBUG:FULL "/INCLUDE:_tcmalloc")
	target_link_libraries(create_disk_layout debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}/diskann_dll.lib ${PROJECT_SOURCE_DIR}/dependencies/windows/tcmalloc/libtcmalloc_minimal.lib)
	target_link_libraries(create_disk_layout optimized ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}/diskann_dll.lib ${PROJECT_SOURCE_DIR}/dependencies/windows/tcmalloc/libtcmalloc_minimal.lib)
else() 
	target_link_libraries(create_disk_layout ${PROJECT_NAME} aio -ltcmalloc)
endif()


# formatter
if (LINUX)
	add_custom_command(TARGET gen_random_slice PRE_BUILD COMMAND clang-format -i ../../../include/*.h ../../../include/dll/*.h ../../../src/*.cpp  ../../../tests/*.cpp ../../../src/dll/*.cpp ../../../tests/utils/*.cpp)
endif()

